1.Valósítsa meg az egész számokat tartalmazó „sakktábla” mátrixtípust. 
Ezen m×n-es mátrixok soraiban biztosan nulla értékű minden második elem. 
A „nem-nulla” értékek sakktábla-szerűen helyezkednek  el
az[1,1],  [1,3],..., [2,2],  [2,4],... indexű helyeken.
A típus reprezentációjában csak ezeket a „nem-nulla” értékű elemeket kell eltárolnunk.
 (Az [1,2], [1,4], ... , [2,1], [2,3], ... indexű helyeken levő biztosan nulla értékű
 elemeket nem tároljuk.) Implementálja önálló metódusként a mátrix i-edik sorának j-edik elemét 
 visszaadó műveletet, valamint az összeadás és szorzás műveleteket, továbbá a mátrix m×n alakban 
 történő kiírását! 
 
 2.Valósítsa meg az egész számokat tartalmazó „X-mátrixtípust”.Ezek négyzetes mátrixok, 
 de csak a  fő–,  és  mellékátlójukban  tartalmazhatnak  nullától  különböző  elemeket. 
 A  típus reprezentációjában csak a főátló és a mellékátló elemeit kell eltárolni. Implementálja 
 önálló metódusként a mátrix i-edik sorának j-edik elemét visszaadó műveletet, valamint 
 az összeadás és szorzás műveleteket, továbbá a mátrix (négyzetes alakú) kiírását!

 3. Valósítsa meg az egész számokat tartalmazó halmaz típust! 
 Ábrázolja a halmaz elemeit egy sorozatban! Implementálja a szokásos műveleteket 
 (adott elem betevése, kivétele, üres-e  a halmaz),  valamint a halmaz legnagyobb elemének 
 kiválasztását (TIPP: ehhez célszerű a halmazt reprezentáló  sorozat mellettkülön  eltárolni  a  
 legnagyobb  elemet,  és  ezt  karbantartani), továbbá egy halmaz kiírását!

-4. Implementáljuk a Pont típust. Használjuk a kör típus implementálásához. Legyen
 függvényünk annak vizsgálatára, hogy egy pont benne van-e egy körben, vagy rajta van-e a köríven.

 5. Implementáljunk egy láncolt listát! A láncolt lista egy eleme tartalmaz egy értéket, és egy
 pointert a következő elemre. Implementáljuk elem hozzáadását, törlését, lekérdezését.

 6. Implementáljunk egy ciklikus láncolt listát, amiben az utolsó elem vissza mutat az első elemre.
 Implementáljuk a szokásos műveleteket.

 7. Képzeljük el, hogy egy worker management videójátékot csinálunk. Használjunk priority queue-kat,
 és egy manager class-t a feladatok prioritásának manageléséhez. Érjük el, hogy egy feladatot egyszerre
 csak egy munkás végezzen, és a magasabb prioritású feladatok hamarabb legyenek elvégezve!

 8. Implementáljuk a komplex számok típusát, minden szükséges művelettel, és operator overloadolással
 összeadásra, kivonásra, szorzásra, és kiírásra.